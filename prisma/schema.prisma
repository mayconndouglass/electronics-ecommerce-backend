generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  image       String
  Product     Product[]

  @@map("categories")
}

model Product {
  id                String   @id @default(uuid())
  name              String
  description       String
  created_at        DateTime @default(now())
  price             String
  promotional_price String?
  discount          Int?
  price_num         Decimal  @default(0.0)

  category     Category       @relation(fields: [category_id], references: [id])
  Review       Review[]
  ProductColor ProductColor[]
  category_id  String
  ProductImage ProductImage[]
  Item         CartItem[]
  FavoriteItem FavoriteItem[]

  @@map("products")
}

model Color {
  id          String @id @default(uuid())
  hexadecimal String @unique

  ProductColor ProductColor[]

  @@map("colors")
}

model ProductColor {
  color      Color   @relation(fields: [color_id], references: [id])
  product    Product @relation(fields: [product_id], references: [id])
  color_id   String
  product_id String

  @@id([color_id, product_id])
  @@map("product_color")
}

model Image {
  id           String         @id @default(uuid())
  url          String         @unique
  ProductImage ProductImage[]

  @@map("images")
}

model ProductImage {
  image      Image   @relation(fields: [image_id], references: [id])
  product    Product @relation(fields: [product_id], references: [id])
  image_id   String
  product_id String

  @@id([image_id, product_id])
  @@map("product_image")
}

model Review {
  id     String @id @default(uuid())
  stars  Int
  coment String

  product    Product @relation(fields: [product_id], references: [id])
  product_id String

  @@map("reviews")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password_hash String
  cpf           String?
  birthdate     DateTime?
  person_type   String?
  created_at    DateTime  @default(now())

  Cart         Cart[]
  Item         CartItem[]
  FavoriteItem FavoriteItem[]
  Order        Order[]
  Address      Address[]

  @@map("users")
}

model Address {
  id           String @id @default(uuid())
  zipCode      Int    @map("zip_code")
  street       String
  number       Int
  state        String
  city         String
  neighborhood String
  complement   String
  userId       String @unique @map("user_id")

  user  User    @relation(fields: [userId], references: [id])
  Phone Phone[]

  @@map("adress")
}

model Phone {
  addressId   String
  phoneNumber Int    @map("phone_number")

  address Address @relation(fields: [addressId], references: [id])

  @@id(name: "phone", [addressId, phoneNumber])
  @@map("phones")
}

model Cart {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String   @unique
  created_at DateTime @default(now())

  Item CartItem[]

  @@map("carts")
}

model CartItem {
  id      String  @id @default(uuid())
  cart    Cart?   @relation(fields: [cart_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])
  user    User    @relation(fields: [user_id], references: [id])

  cart_id    String?
  product_id String
  quantity   Int
  user_id    String
  price      String
  Order      Order[]

  @@map("cart_items")
}

model FavoriteItem {
  user    User    @relation(fields: [user_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  user_id    String
  product_id String
  created_at DateTime @default(now())

  @@id(name: "favoriteItem", [user_id, product_id])
  @@map("favorite_items")
}

model Order {
  id             String   @id @default(uuid())
  userId         String   @map("user_id")
  itemId         String   @map("item_id")
  status         String
  shippingMethod String   @map("shipping_method")
  shippingFee    String   @map("shipping_fee")
  paymentMethod  String   @map("payment_method")
  totalPayable   String   @map("total_payable")
  createdAt      DateTime @default(now()) @map("created_at")

  user User     @relation(fields: [userId], references: [id])
  item CartItem @relation(fields: [itemId], references: [id])

  @@map("orders")
}

//TODO: Pesqisar como fica um cartItem pode ter apenas uma ordem, mas uma ordem tem vários cartItem, aparentemente está errado aqui, pq em CartItem tem Orders[]
